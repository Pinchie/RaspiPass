#!/bin/bash
# Main RaspiPass script - calculates whether a random check passes, and raises an access point
# with details drawn from /raspipass/mac_addresses.txt

errcho() { echo "$@" 1>&2; }

# Read command-line parameters

while getopts ":hp:" opt; do
        case "$opt" in
		p)
			probability=$OPTARG
			echo Probability manually set at $OPTARG%
			;;
                h)
                        HELP=true
                        ;;
                \?)
                        errcho "Invalid option: -$OPTARG"
                        exit 1
                        ;;
		:)
			errcho "Option -$OPTARG requires an argument."
			exit 1
			;;
        esac
done

if [[ $HELP == true ]]
then
        echo "raspipass -- Main RaspiPass script. Uses defined probability to calculate whether to raise a"
	echo "             StreetPass Relay access point."
	echo
	echo "*** NOTE: To be run with sudo, or as root"
        echo
        echo "USAGE: raspipass [OPTIONS]"
        echo
        echo "Option		Meaning"
        echo "-h		This help text"
	echo "-p [%]		Set manual probability of raising AP"
        exit 0
fi

echo `date`
echo "Starting RaspiPass..."

# Check probability file
if [ -z $probability ]
then
	echo "Checking for probability setting..."
	if [ -f /raspipass/runchance.txt ]
	then
#		echo "/raspipass/runchance.txt found. Reading probability."
		if [ "`grep $'\x60' /raspipass/runchance.txt`" ]
		then
			errcho "Source file contains illegal character(s). Aborting sourcing."
			errcho "Using default probability of 20%."
			probability=20
		else
			source /raspipass/runchance.txt
			if [ -z $probability ]
			then
				errcho "File read. Probability not set. Using default of 20%."
				probability=20
			fi
		fi
	else
		errcho "/raspipass/runchance.txt not found. Using default probability of 20%."
		probability=20
	fi
fi

# Check probability is valid

if [ ! $probability -eq $probability ] 2> /dev/null
then
	errcho "ERROR: Probability value is not an integer. Using default of 20%."
	probability=20
fi

if [ $probability -le 0 ] || [ $probability -gt 100 ]
then
	errcho "ERROR: Probability value is out of range. Using default of 20%."
	probability=20
fi

# Run probability calculation
echo "Running random check with $probability% chance..."
raspiroll=`shuf -i 1-100 -n 1`
if [ $raspiroll -le $probability ]
then
# Successful roll
	echo "Random check passed - bringing up AP."
	echo "Closing any existing hostapd processes..."
	killall hostapd 2> /dev/null
	exitstat=$?
	if [ $exitstat -eq 0 ]
	then
		echo "hostapd successfully terminated."
	fi
	ifconfig wlan0 down
	ifdown wlan0

# Copy base hostapd.conf to /run and append SSID
	cp /raspipass/hostapd.conf /run/hostapd.conf
	IFS=',' read -a apsettings <<< `rl -c 1 /raspipass/mac_addresses.txt`
	echo Using SSID ${apsettings[0]} and MAC address ${apsettings[1]}
	echo "ssid=${apsettings[0]}" >> /run/hostapd.conf
	echo Changing MAC address...
	/usr/bin/macchanger -m ${apsettings[1]} wlan0 > /dev/null
	ifup wlan0

# Bring up AP
	echo "Bringing up access point..."
	bash -c "/usr/sbin/hostapd -t /run/hostapd.conf" >> /run/log/hostapd &
	echo killall hostapd | at now + 5 minutes > /dev/null
else
# Unsuccessful roll
	echo "Random check did not pass - not raising an access point this time."
fi
